This directory holds the source code modifications and compiled tools for a Plan 9 kernel that can boot with no root fileserver, and places all the post-kernel load bootup procedures into an rc-based environment. The user can also choose to bypass the normal bootup procedure entirely and create a small self-sufficient ramdisk based cpu server. The current state is usable but is focused on standard pc bootup sequences. 

To use the precompiled kernel, just boot it and it will provide an interactive environment for starting and attaching to bootup services, or if you provide appropriate configuration variables via plan9.ini it will follow them with results that should be mostly identical to a standard kernel. It provides many tools compiled into boot allowing the kernel to be self-sufficient in starting and attaching to services. It is optional to provide an additional .tgz in the bootup partition which can allow for local customization of the early boot environment without recompiling the kernel. There are already many useful tools compiled right into /boot of the kernel so it is not necessary to download the rootfs.tgz to use the precompiled kernel effectively.

The core kernel remains almost completely unmodified, but the traditional boot and init programs have been combined into a single, smaller program that aims to transfer control to rc as soon as possible. An rc script called "plan9rc" controls the functions of starting factotum, potentially creating a small ramfs based independent environment, starting venti/fossil/kfs or dialing an external fs in the fashion of a tcp booted cpu.

By setting interactive=yes in plan9.ini the user can control whether or not any or all of these services are started and with what variables. The user can also drop to an rc shell to work freely with whatever tools are compiled into /boot or setup in a ramfs. The kernel was compiled as a cpu kernel, but setting service=terminal should produce terminal-style behavior. Interactive mode is useful for bringing new nodes online because the configuration is saved to temporary files on the ramdisk and the savecfg script produces a configuration which may be used as a plan9.ini menuitem option.

Other plan9.ini variables can be used to control the behavior of options additional boot time behavior. A provided skeleton fs setup can be controlled with the ramsetup variable, which defaults to use a provided script, ramskel. Another optional script can be run later in boot. The provided 'initskel' script (requires initscript=initskel option) starts a minimal cpu server environement in the restricted initial namespace. The default port for this is 17020 to avoid conflict with a standard cpu listener started later.

It is possible to create multiple independent environments with the kernel-rooted environment separate from any of them. With suitable control of options, the plan9rc script can be used as a general purpose launcher for plan 9 environments. Also, it is possible to provide a separate key at boot time for the early boot environment, but this runs the risk of conflicting with existing auth servers and requires some understanding of factotum namespaces to make use of.

There are also some scripts that provide easy ways to modify your namespace to acquire different "roots". Especially useful is "rerootwin [target]" which accepts the name of a /srv or an ip or system name to dial and arranges to use it as the root of the environment while still keeping the devices from /mnt/term in the namespace. addwrroot and addroroot attach to the target in writable or read-only mode without the extra shenanigans. addsources gives you access to sources copy of the distribution as your 'root'.

To install without recompiling, place the 9pcram.gz kernel in your 9fat: partition and edit plan9.ini to use a boot menu to give you the option of using that kernel. Some additional tweaking and studying of what is going on is recommended for effective use. The precompiled kernel also includes the writable /proc/ns mod which is helpful for dealing with strange namespaces on the fly.

This kernel version and software originally based on the Plan 9 source tree from December of 2009. Updated to compile with more recent kernels January 2013.
