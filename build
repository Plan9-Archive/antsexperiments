#!/bin/rc
# build script for advanced namespace tools/rootless boot kernel
# build clean, build patched, build tools, build extras, build bootpaq, build ramfs / build

if(! test -e bootdir.extras){
	echo this build script MUST be run only from the base rootless directory
	exit wrong.dir
}

##	set up namespace so we keep everything we do contained

rfork ne
builddir=`{pwd}
bind -b $builddir/src.9.boot /sys/src/9/boot
bind -b $builddir/src.9.port /sys/src/9/port
bind -b $builddir/src.9.pc /sys/src/9/pc
bind -b $builddir/scripts /bin
bind $builddir /n/rootless
bind -bc $builddir/compiletemp /sys/src/9/pc

if(~ $1 everything){
	echo building everything
	build clean
	build patched
	build tools
	build extras
	build bootpaq
	build
	exit ''
}

if(~ $1 clean){
	echo building mk clean
	cd /sys/src/9/pc
	mk clean
	cd $builddir
	cd grio
	mk clean
	cd $builddir
	cd hubfs1.1
	mk clean
	cd $builddir
	rm root/bin/* >/dev/null >[2=1]
	rm bootdir.extras/bootpaq >/dev/null >[2=1]
	exit ''
}

if(~ $1 patched){
	echo building patched
	ramfs
	mkdir /tmp/rc
	mkdir /tmp/factotum
	dircp /sys/src/cmd/rc /tmp/rc
	dircp /sys/src/cmd/auth/factotum /tmp/factotum
	cp patched/rc.plan9.c /tmp/rc/plan9.c
	cp patched/factotumdat.h /tmp/factotum/dat.h
	cp patched/factotumfs.c /tmp/factotum/fs.c
	cp patched/factotumutil.c /tmp/factotum/util.c
	cd /tmp/rc
	mk
	cp 8.out $builddir/bootdir.extras/rc
	cd /tmp/factotum
	mk 8.factotum
	cp 8.factotum $builddir/bootdir.extras/factotum
	cd $builddir
	strip bootdir.extras/rc
	strip bootdir.extras/factotum
	rm -rf /tmp/rc
	rm -rf /tmp/factotum
	exit ''
}	

if(~ $1 extras){
	echo building extras
	cd grio
	mk clean
	mk
	cp 8.out ../bootdir.extras/grio
	cd ../hubfs1.1
	mk clean
	mk all
	cp 8.hubfs ../bootdir.extras/hubfs
	cp 8.hubshell ../bootdir.extras/hubshell
	cp hub ../bootdir.extras
	cd $builddir
	strip bootdir.extras/grio
	strip bootdir.extras/hubfs
	strip bootdir.extras/hubshell
	exit ''
}

if(~ $1 bootpaq){
	echo building bootpaq
	cp scripts/* bootdir.extras/root/bin
	cd bootdir.extras
	rm skel.tar
	tar cf skel.tar root
	cd $builddir
	rm root/bin/* >/dev/null >[2=1]
	cp root/lib/_mkpaq root/bin
	cd root/bin
	. _mkpaq
	cd $builddir
	strip root/bin/*
	mkpaqfs -b 8192 -o bootdir.extras/bootpaq root/bin
	sha1sum bootdir.extras/bootpaq >>build.hashes
	exit ''
}

if(~ $1 tools){
	echo building tools
	rm root/bin/* >/dev/null >[2=1]
	cp root/lib/_toolcopy root/bin
	cd root/bin
	. _toolcopy
	cd $builddir
	strip root/bin/*
	ramfs -m /tmp
	tar cf /tmp/tools.tar root
	gzip -9 -c /tmp/tools.tar >tools.tgz
	rm /tmp/tools.tar
	cd $builddir
	sha1sum tools.tgz >>build.hashes
	exit ''
}

echo building kernel
rm root/bin/* >/dev/null >[2=1]
cp /bin/paqfs root/bin
cp /bin/usb/usbd root/bin
cp /bin/disk/partfs root/bin
cp /bin/bind root/bin
cp /bin/mount root/bin
cp /bin/read root/bin
cp /bin/cat root/bin
cp /bin/echo root/bin
cp /bin/test root/bin
strip root/bin/*
if(~ $1 ramfs){
	echo building kernel in tmp
	ramfs -m /tmp
	bind -bc /tmp /sys/src/9/pc
}
cd /sys/src/9/pc
mk 'CONF=pcram'
gzip -9 -c 9pcram > $builddir/compiletemp/9pcram.gz
cd $builddir
sha1sum compiletemp/9pcram.gz >>build.hashes
exit ''
