The ANTS toolkit is designed to create different namespaces for
different purposes.  The top layer is a modified rio named grio which
integrates with hubfs.  The modificatioin is simple: the addition to
the menu of a Hub command, which operates identically to New except
the rc in the window is connected to a hubfs.  It is intended that
each node on a grid, and possibly different namespaces on each node,
will connect to the hubfs and create a shell with %local.  In this
way, shells from every machine become available within one hubfs.  The
user adds a statement to profile such as:

	import -a hubserver /srv &

When grio is started, it looks for /srv/riohubfs.username to mount.
This way, whichever node the user cpus to will have the same hubfs
opened from the Hub menu option in rio, and because all systems are
exporting shells to the hub, the user can cpu to any node and then
have persistent workspaces on any machine.  The state of the hubs
remains regardless of where and how the user attaches or unattaches.

The initskel script also starts a hubfs by default in the early boot
environment.  This allows the user to easily access the ramroot
namespace from the standard user environment.  If the user desires,
they could pre-mount the /srv/hubfs started at boot instead of the
networked riohubfs to enable easy admin work in that namespcae.  It is
even possible to create two layers of shared hubs - a shared
administrative layer shared between machines running shells in the ram
namespace, and another set of hubs in the standard namespace.  In
fact, these two layers can be freely mixed.

This is another way hubfs functions - to 'save' namespaces.  If there
is a namespace which is sometimes useful, but diverges from the main
environment, it can be built with in a hubfs shell to be visited later
at will.  A single hubfs can provide a meeting point for any number of
namespaces built on any number of machines and allow data to be pumped
directly between processes file descriptors.
